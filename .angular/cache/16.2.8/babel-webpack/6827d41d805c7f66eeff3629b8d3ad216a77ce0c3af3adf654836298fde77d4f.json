{"ast":null,"code":"var LoginComponent_1;\nimport { __decorate } from \"tslib\";\nimport { Component, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nexport let LoginComponent = LoginComponent_1 = class LoginComponent {\n  constructor(router) {\n    this.router = router;\n    this.user = {\n      username: '',\n      password: ''\n    };\n  }\n  onSubmit() {\n    // Aqui você pode adicionar a lógica para fazer uma solicitação de login ao serviço de autenticação.\n    // Você pode usar um serviço de autenticação que lida com a comunicação com o backend.\n    // Exemplo de redirecionamento após um login bem-sucedido:\n    if ( /* Lógica de autenticação bem-sucedida */1 == 1) {\n      this.router.navigate(['/dashboard']); // Redirecionar para a página de dashboard ou para onde desejar.\n    } else {\n      // Lógica para lidar com o login malsucedido, como exibir uma mensagem de erro.\n    }\n  }\n};\nLoginComponent = LoginComponent_1 = __decorate([NgModule({\n  declarations: [LoginComponent_1],\n  imports: [FormsModule] // Certifique-se de incluir o FormsModule aqui\n}), Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","NgModule","FormsModule","LoginComponent","LoginComponent_1","constructor","router","user","username","password","onSubmit","navigate","__decorate","declarations","imports","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Usuário\\Projetos\\simdex-web\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component, NgModule } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [FormsModule], // Certifique-se de incluir o FormsModule aqui\n})\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  user = {\n  username: '',\n  password: ''\n  };\n\n  constructor(private router: Router) {}\n\n  onSubmit() {\n    // Aqui você pode adicionar a lógica para fazer uma solicitação de login ao serviço de autenticação.\n    // Você pode usar um serviço de autenticação que lida com a comunicação com o backend.\n\n    // Exemplo de redirecionamento após um login bem-sucedido:\n    if (/* Lógica de autenticação bem-sucedida */ 1 ==1 ) {\n      this.router.navigate(['/dashboard']); // Redirecionar para a página de dashboard ou para onde desejar.\n    } else {\n      // Lógica para lidar com o login malsucedido, como exibir uma mensagem de erro.\n    }\n  }\n\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,eAAe;AAEnD,SAASC,WAAW,QAAQ,gBAAgB;AAYrC,WAAMC,cAAc,GAAAC,gBAAA,GAApB,MAAMD,cAAc;EAMzBE,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAL1B,KAAAC,IAAI,GAAG;MACPC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;KACT;EAEoC;EAErCC,QAAQA,CAAA;IACN;IACA;IAEA;IACA,KAAI,yCAA0C,CAAC,IAAG,CAAC,EAAG;MACpD,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;KACvC,MAAM;MACL;IAAA;EAEJ;CAED;AApBYR,cAAc,GAAAC,gBAAA,GAAAQ,UAAA,EAV1BX,QAAQ,CAAC;EACRY,YAAY,EAAE,CAACT,gBAAc,CAAC;EAC9BU,OAAO,EAAE,CAACZ,WAAW,CAAC,CAAE;CACzB,CAAC,EAEDF,SAAS,CAAC;EACTe,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWd,cAAc,CAoB1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}